# üîê CREDENTIALS TEMPLATE - COPY TO .env.local AND FILL IN VALUES
# Documentation: API_CREDENTIALS_USAGE.md

# ------------------------------
# 1. SUPABASE CREDENTIALS
# ------------------------------

# The URL is needed client-side to initialize the SDK, it must be public.
NEXT_PUBLIC_SUPABASE_URL=your_supabase_url

# The Anon Key (public) for client-side initialization
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key

# The Service Role Key is VERY sensitive and should ONLY be used server-side (e.g., API Routes).
SUPABASE_SERVICE_ROLE_KEY=your_supabase_service_role_key

SUPABASE_JWT_SECRET=your_supabase_jwt_secret
SUPABASE_DB_PASSWORD=your_supabase_db_password

# ------------------------------
# 2. GOOGLE VERTEX AI (100% REQUIRED)
# ------------------------------

# ‚ö†Ô∏è CRITICAL: Use ONLY Vertex AI - NO Google AI Studio, NO Hugging Face
# Vertex AI Service Account Credentials (JSON file path)
# This file MUST be in .gitignore and NEVER committed
# Download from: https://console.cloud.google.com/iam-admin/serviceaccounts
GOOGLE_APPLICATION_CREDENTIALS=./vertex-ai-credentials.json

# Google Cloud Project Configuration
GOOGLE_CLOUD_PROJECT=your_gcp_project_id
GOOGLE_CLOUD_LOCATION=us-central1

# Vertex AI Model Configuration
VERTEX_AI_MODEL=gemini-1.5-pro
VERTEX_AI_ENDPOINT=us-central1-aiplatform.googleapis.com

# ------------------------------
# 3. GOOGLE CLOUD SPEECH APIs (STT/TTS via Vertex AI)
# ------------------------------

# Speech-to-Text and Text-to-Speech via Vertex AI
# Uses same service account as GOOGLE_APPLICATION_CREDENTIALS
# NO separate API keys needed - service account handles authentication
# Ensure these APIs are enabled in your GCP project:
#   - Cloud Speech-to-Text API
#   - Cloud Text-to-Speech API
#   - Vertex AI API

# ------------------------------
# 4. OTHER SECRETS
# ------------------------------

# The JWT key is used for encryption/decoding server-side.
JWT_SECRET=your_jwt_secret

# ADMIN CREDENTIALS
ADMIN_USERNAME=your_admin_username
ADMIN_PASSWORD_HASH=your_admin_password_hash
ADMIN_SALT=your_admin_salt

# CRON AUTHENTICATION
CRON_AUTH_TOKEN=your_cron_auth_token

# PERFORMANCE MONITORING
NEXT_PUBLIC_PERFORMANCE_MONITORING=true
NEXT_PUBLIC_SECURITY_LEVEL=high
NEXT_PUBLIC_MONITORING_ENDPOINT=/api/analytics/web-vitals

# GITHUB REPOSITORY
GITHUB_REPO_URL=your_github_repo_url

# ENVIRONMENT
NODE_ENV=development
NEXT_PUBLIC_APP_ENV=development
NEXT_PUBLIC_BASE_URL=http://localhost:3000

# Google Analytics Configuration
NEXT_PUBLIC_GA_ID=your_google_analytics_id
GOOGLE_ANALYTICS_ID=your_google_analytics_id

# ------------------------------
# 5. SECURITY NOTES
# ------------------------------

# ‚ùå NEVER expose these in client-side code:
#    - SUPABASE_SERVICE_ROLE_KEY
#    - JWT_SECRET
#    - ADMIN_PASSWORD_HASH
#    - CRON_AUTH_TOKEN
#    - vertex-ai-credentials.json contents
#    - GOOGLE_APPLICATION_CREDENTIALS path or contents
#
# ‚úÖ Only NEXT_PUBLIC_* variables are exposed to the browser
# ‚úÖ All other variables are server-side only (API routes, getServerSideProps)
# ‚úÖ Use Vercel Environment Variables for production deployment
# ‚úÖ Rotate credentials regularly and after any suspected breach
# ‚úÖ Never commit .env.local or vertex-ai-credentials.json to git
#
# For production deployment on Vercel:
# 1. Add all non-NEXT_PUBLIC_ variables as Vercel Environment Variables
# 2. Upload vertex-ai-credentials.json content as GOOGLE_APPLICATION_CREDENTIALS_JSON
# 3. Set NODE_ENV=production
# 4. Enable "Automatically expose System Environment Variables"